---
import AzureIcon from "@/components/icons/devops/AzureIcon.astro";
import BootstrapIcon from "@/components/icons/frontend/BootstrapIcon.astro";
import GithubIcon from "@/components/icons/devops/GithubIcon.astro";
import JQueryIcon from "@/components/icons/frontend/JQueryIcon.astro";
import MySQLIcon from "@/components/icons/db/MySQLIcon.astro";
import NextJSIcon from "@/components/icons/frontend/NextJSIcon.astro";
import PostgreSQLIcon from "@/components/icons/db/PostgreSQLIcon.astro";
import SpringIcon from "@/components/icons/backend/SpringIcon.astro";
import TailwindIcon from "@/components/icons/frontend/TailwindIcon.astro";
import ThymeleafIcon from "@/components/icons/frontend/ThymeleafIcon.astro";
import MongodbIcon from "@/components/icons/db/MongodbIcon.astro";
import PythonIcon from "@/components/icons/backend/PythonIcon.astro";
import JavaIcon from "@/components/icons/backend/JavaIcon.astro";
import NodejsIcon from "@/components/icons/backend/NodejsIcon.astro";
import CSSIcon from "@/components/icons/frontend/CSSIcon.astro";
import JavascriptIcon from "@/components/icons/frontend/JavascriptIcon.astro";
import TypescriptIcon from "@/components/icons/frontend/TypescriptIcon.astro";
import AstroIcon from "@/components/icons/frontend/AstroIcon.astro";
import ReactIcon from "@/components/icons/frontend/ReactIcon.astro";
import HTMLIcon from "@/components/icons/frontend/HTMLIcon.astro";
import GitIcon from "@/components/icons/devops/GitIcon.astro";
import DatabricksIcon from "@/components/icons/devops/DatabricksIcon.astro";
import KubernetesIcon from "@/components/icons/devops/KubernetesIcon.astro";
import DockerIcon from "@/components/icons/devops/DockerIcon.astro";
import RedisIcon from "@/components/icons/db/RedisIcon.astro";
import CiCdIcon from "@/components/icons/devops/CiCdIcon.astro";
import FastApiIcon from "@/components/icons/backend/FastApiIcon.astro";

const skills = [
    // Frontend Technologies
    { name: "Next.js", icon: NextJSIcon, level: "Advanced", category: "frontend" },
    { name: "Astro", icon: AstroIcon, level: "Intermediate", category: "frontend" },
    { name: "React", icon: ReactIcon, level: "Intermediate", category: "frontend" },
    { name: "Tailwind CSS", icon: TailwindIcon, level: "Advanced", category: "frontend" },
    { name: "HTML", icon: HTMLIcon, level: "Advanced", category: "frontend" },
    { name: "CSS", icon: CSSIcon, level: "Advanced", category: "frontend" },
    { name: "JavaScript", icon: JavascriptIcon, level: "Advanced", category: "frontend" },
    { name: "TypeScript", icon: TypescriptIcon, level: "Intermediate", category: "frontend" },

    // Backend Technologies
    { name: "Python", icon: PythonIcon, level: "Intermediate", category: "backend" },
    { name: "Java", icon: JavaIcon, level: "Advanced", category: "backend" },
    { name: "Spring Boot", icon: SpringIcon, level: "Advanced", category: "backend" },
    { name: "Node.js", icon: NodejsIcon, level: "Intermediate", category: "backend" },
    { name: "FastAPI", icon: FastApiIcon, level: "Intermediate", category: "backend" },

    // Database Technologies
    { name: "PostgreSQL", icon: PostgreSQLIcon, level: "Intermediate", category: "database" },
    { name: "MySQL", icon: MySQLIcon, level: "Intermediate", category: "database" },
    { name: "MongoDB", icon: MongodbIcon, level: "Basic", category: "database" },
    { name: "Redis", icon: RedisIcon, level: "Basic", category: "database" },

    // DevOps & Cloud Technologies
    { name: "Azure", icon: AzureIcon, level: "Intermediate", category: "devops" },
    { name: "Docker", icon: DockerIcon, level: "Intermediate", category: "devops" },
    { name: "Git", icon: GitIcon, level: "Intermediate", category: "devops" },
    { name: "Databricks", icon: DatabricksIcon, level: "Intermediate", category: "devops" },
    { name: "CI/CD", icon: CiCdIcon, level: "Intermediate", category: "devops" },
    { name: "Kubernetes", icon: KubernetesIcon, level: "Intermediate", category: "devops" }

];

const getLevelBg = (level) => {
    switch(level) {
        case "Advanced": return "from-purple-800/20 to-purple-950/10 border-purple-400/20";
        case "Intermediate": return "from-sky-800/20 to-sky-950/10 border-sky-400/20";
        case "Basic": return "from-lime-800/20 to-lime-950/10 border-lime-400/20";
    }
};

const getTechnologyColor = (technology) => {
    switch(technology) {
        case "frontend": return "from-blue-800/20 to-blue-950/10 border-blue-500/30 group-hover:border-blue-500/70";
        case "backend": return "from-orange-800/20 to-orange-950/10 border-orange-500/30 group-hover:border-orange-500/70";
        case "database": return "from-emerald-800/20 to-emerald-950/10 border-emerald-500/30 group-hover:border-emerald-600/70";
        case "devops": return "from-slate-800/20 to-slate-950/10 border-slate-500/30 group-hover:border-slate-500/70";
    }
};

const getTechnologyColorIndicator = (technology) => {
    switch(technology) {
        case "frontend": return "from-blue-900/30 to-blue-950/30 border-blue-900 group-hover:border-blue-600";
        case "backend": return "from-orange-900/30 to-orange-950/30 border-orange-900 group-hover:border-orange-600";
        case "database": return "from-emerald-900/30 to-emerald-950/30 border-emerald-900 group-hover:border-emerald-600";
        case "devops": return "from-slate-900/30 to-slate-950/30 border-slate-800 group-hover:border-slate-700";
    }
};

const filters = [
    { name: "All", value: "all", color: "from-secondary/15 to-secondary/10 border-secondary" },
    { name: "Frontend", value: "frontend", color: "from-blue-900/30 to-blue-950/30 border-blue-900" },
    { name: "Backend", value: "backend", color: "from-orange-900/30 to-orange-950/30 border-orange-900 group-hover:border-orange-600" },
    { name: "Databases", value: "database", color: "from-emerald-900/30 to-emerald-950/30 border-emerald-900 group-hover:border-emerald-600" },
    { name: "DevOps", value: "devops", color: "from-slate-900/30 to-slate-950/30 border-slate-800 group-hover:border-slate-700" }
];
---

<div class=" min-h-[400px] md:min-h-[500px] lg:min-h-[600px]">
    <!-- Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-4 mb-10 px-4">
        {filters.map((filter, index) => (
            <button
                class={`filter-btn relative py-3 px-6 border border-primary/20 rounded-3xl cursor-pointer
                    bg-gradient-to-br from-primary/10 to-primaryDark/10 backdrop-blur-md ${index === 0 ? 'active' : ''}`}
                data-filter={filter.value}
                style={`animation-delay: ${index * 0.1}s`}
            >
                <span class={`filter-btn-bg bg-gradient-to-r ${filter.color}`}></span>
                <span class="relative z-20 transition-all ease-in-out duration-300 text-secondary font-semibold">
                    {filter.name}
                </span>
            </button>
        ))}
    </div>

    <!-- Skills Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
        {skills.map((skill, skillIndex) => (
            <div
                class="relative group p-4 rounded-xl bg-gradient-to-br from-primary/10 to-primaryDark/10
                border border-primary/20 shadow-md shadow-primary/10 transition-all duration-300
                ease-in-out hover:scale-[1.02] hover:shadow-primary/40 border-t-0 hover:from-primary/10 hover:to-primary/10"
                data-category={skill.category}
                style={`animation-delay: ${skillIndex * 0.1}s`}
            >

                <div class="flex items-center gap-4">
                        <div class={`flex items-center justify-center rounded-2xl w-16 h-16
                            bg-gradient-to-r border ${getTechnologyColor(skill.category)} backdrop-blur-xl `}>
                            {skill.icon && ( <skill.icon class="size-8 text-white/80 group-hover:text-white" /> )}
                        </div>
                    <div class="flex flex-col gap-2">
                        <span class="text-sm font-bold text-primaryDark group-hover:text-primary">{skill.name}</span>
                        <span class={`py-1 px-2 rounded-lg text-xs font-medium border bg-gradient-to-r text-secondary/80
                            group-hover:text-secondary w-fit ${getLevelBg(skill.level)}`}
                        >
                            {skill.level}
                        </span>
                    </div>
                </div>


                <!-- Category indicator -->
                <div class={`absolute top-0 left-0 w-full h-2 bg-gradient-to-r border border-b-0
                    rounded-t-3xl opacity-100 ${getTechnologyColorIndicator(skill.category)}`}>
                </div>
            </div>
        ))}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const skillCards = document.querySelectorAll('[data-category]');

        // Initialize all cards as visible (since "All" is active by default)
        skillCards.forEach(card => {
            card.classList.add('showing');
        });

        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                const filter = this.getAttribute('data-filter');

                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');

                // First, hide all cards that should be hidden
                skillCards.forEach(card => {
                    const category = card.getAttribute('data-category');
                    const shouldShow = filter === 'all' || filter === category;

                    if (!shouldShow) {
                        card.classList.add('hiding');
                    }
                });

                // After hiding animation completes, show the relevant cards
                setTimeout(() => {
                    let visibleIndex = 0;
                    skillCards.forEach(card => {
                        const category = card.getAttribute('data-category');
                        const shouldShow = filter === 'all' || filter === category;

                        if (shouldShow) {
                            card.style.display = 'block';
                            card.classList.remove('hiding', 'hidden');
                            card.style.animationDelay = `${visibleIndex * 0.1}s`;
                            setTimeout(() => {
                                card.classList.add('showing');
                            }, visibleIndex * 50);
                            visibleIndex++;
                        } else {
                            card.style.display = 'none';
                            card.classList.add('hidden');
                            card.classList.remove('showing');
                        }
                    });
                }, 150);
            });
        });
    });
</script>

<style>

    /* Filter Buttons */
    .filter-btn {
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        transform: translateY(20px);
        animation: slideInUp 0.6s ease-out forwards;
    }

    .filter-btn:hover {
        border-color: rgba(255, 0, 93, 0.3);
        box-shadow: 0 10px 30px rgba(255, 0, 93, 0.2);
    }

    .filter-btn.active {
        border-color: rgba(255, 0, 93, 0.4);
        box-shadow: 0 8px 25px rgba(255, 0, 93, 0.3);
    }

    .filter-btn.active .filter-btn-bg {
        opacity: 1;
    }

    .filter-btn-bg {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        opacity: 0;
        transition: opacity 0.3s ease;
        border-radius: 2rem;
    }

    .filter-btn:hover .filter-btn-bg {
        opacity: 0.7;
    }

    /* Animations */
    @keyframes slideInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes float {
        0%, 100% {
            transform: translateY(0) rotate(0deg);
            opacity: 0;
        }
        50% {
            transform: translateY(-20px) rotate(180deg);
            opacity: 1;
        }
    }


</style>